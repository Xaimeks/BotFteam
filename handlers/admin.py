from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
import asyncpg
from db import db_main
from keyboards.admin_kb import admin_output_types, output_money
import re

router = Router()

@router.message(F.text == "ü§ñ –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥")
async def output_requests(message: Message):
    conn = await db_main()

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞.",
        reply_markup=admin_output_types()
    )
    await conn.close()

@router.message(F.text == "–û–∂–∏–¥–∞—é—â–∏–µ")
async def awaiting_requests(message: Message):
    conn = await db_main()

    existing_requests = await conn.fetch(
        "SELECT * FROM withdraw_request WHERE status = 'pending'"
    )

    if existing_requests:
        for request in existing_requests:
            user_stats = await conn.fetchrow(
                "SELECT * FROM user_stats WHERE user_id = $1", request['user_id']
            )
            if user_stats:
                await message.answer(
                    f"–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{request['username']}: {request['amount']} —Ä—É–±–ª–µ–π.\n"
                    f"–ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_stats['wallet']}", 
                    reply_markup=output_money()
                )
    else:
        await message.answer("–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.")
    
    await conn.close() 

@router.message(F.text == "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ")
async def complete_requests(message: Message):
    conn = await db_main()

    existing_requests = await conn.fetch(
        "SELECT * FROM withdraw_request WHERE status = 'complete'"
    )

    if existing_requests:
        for request in existing_requests:
            user_stats = await conn.fetchrow(
                "SELECT * FROM user_stats WHERE user_id = $1", request['user_id']
            )
            if user_stats:
                await message.answer(
                    f"–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{request['username']}: {request['amount']} —Ä—É–±–ª–µ–π.\n"
                    f"–ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_stats['wallet']}", 
                    reply_markup=output_money()
                )
    else:
        await message.answer("–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.")
    
    await conn.close() 

@router.callback_query(F.data == "make_withdraw")
async def withdraw_handler(call: CallbackQuery):
    conn = await db_main()
    message_text = call.message.text

    match = re.search(r'@(\w+)', message_text)
    if match:
        username = match.group(1)

        user_data = await conn.fetchrow(
            "SELECT user_id FROM withdraw_request WHERE username = $1", username
        )
        if user_data:
            user_id = user_data['user_id']
            print(f"–ù–∞–π–¥–µ–Ω user_id: {user_id}")
        else:
            await call.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await conn.close()
            return

        withdraw_request = await conn.fetchrow(
            "SELECT * FROM withdraw_request WHERE status = 'pending' AND user_id = $1", 
            user_id
        )

        if withdraw_request:
            user_stats = await conn.fetchrow(
                "SELECT * FROM user_stats WHERE user_id = $1",
                user_id
            )

            if user_stats and user_stats['balance'] >= withdraw_request['amount']:
                new_balance = user_stats['balance'] - withdraw_request['amount']

                await conn.execute(
                    """
                    UPDATE user_stats
                    SET balance = $1
                    WHERE user_id = $2
                    """,
                    new_balance, user_id
                )

                await conn.execute(
                    """
                    UPDATE withdraw_request
                    SET status = 'completed'
                    WHERE id = $1
                    """,
                    withdraw_request['id']
                )

                await call.message.answer(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ä—É–±–ª–µ–π.")
            else:
                await call.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
                print(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_stats['balance'] if user_stats else '–ù–µ –Ω–∞–π–¥–µ–Ω'}, "
                      f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—É–º–º–∞: {withdraw_request['amount']}")
        else:
            await call.message.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await call.message.answer("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")

    await conn.close()
