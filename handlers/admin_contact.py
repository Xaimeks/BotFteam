from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
import asyncpg
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from keyboards.for_start_kb import start_keyboard
from keyboards.admin_contact import admin_contact_kb
from db import db_main

router = Router()

class UserRequest(StatesGroup):
    user_message_unban = State()
    user_message_staff = State()

@router.message(F.text == "üì® –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π")
async def admin_contact(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ:", reply_markup=admin_contact_kb())

@router.callback_query(F.data == "unban_request")
async def unban_request(call: CallbackQuery, state: FSMContext):
    await call.answer("–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–∑–±–∞–Ω")
    await call.message.answer(
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –ø–æ—á–µ–º—É –≤—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã?"
    )
    await state.set_state(UserRequest.user_message_unban)

@router.message(StateFilter(UserRequest.user_message_unban))
async def unban_request_text(message: Message, state: FSMContext):
    user_message = str(message.text)
    username = message.from_user.username
    
    if len(user_message) > 255:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return 

    conn = await db_main()
    try:
        await conn.execute(
            """
            INSERT INTO unban_requests (user_name, request_text)
            VALUES ($1, $2)
            """,
            username, user_message
        )
        await message.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", reply_markup=start_keyboard())
    
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", reply_markup=start_keyboard())
        print(f"–û—à–∏–±–∫–∞ {e}")
    
    finally:
        await state.clear() 
        await conn.close()

@router.callback_query(F.data == "staff_request")
async def staff_request(call: CallbackQuery, state: FSMContext):
    await call.answer("–ó–∞—è–≤–∫–∞ –≤ —Å—Ç–∞—Ñ—Ñ –ø—Ä–æ–µ–∫—Ç–∞")
    conn = await db_main()
    user_id = call.from_user.id
    user_status = await conn.fetchrow(
        """
        SELECT status FROM user_stats WHERE user_id = $1
        """, user_id
    )
    if user_status == "GOLDEN" or "DIAMOND":
        await call.message.answer(
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ."
        )
        await state.set_state(UserRequest.user_message_staff)
    else:
        await call.message.answer(
            "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ —Å—Ç–∞—Ñ—Ñ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –≤–∞—Å –æ—Ç 100–∫ –ø—Ä–æ—Ñ–∏—Ç–∞."
        )

@router.message(StateFilter(UserRequest.user_message_staff))
async def staff_request_text(message: Message, state: FSMContext):
    user_message = str(message.text)
    username = message.from_user.username
    
    if len(user_message) > 255:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return 

    conn = await db_main()
    try:
        await conn.execute(
            """
            INSERT INTO staff_requests (username, request_text)
            VALUES ($1, $2)
            """,
            username, user_message
        )
        await message.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –≤ —Å—Ç–∞—Ñ—Ñ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", reply_markup=start_keyboard())
    
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", reply_markup=start_keyboard())
        print(f"–û—à–∏–±–∫–∞ {e}")
    
    finally:
        await state.clear() 
        await conn.close()